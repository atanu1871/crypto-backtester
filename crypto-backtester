# main.py

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime

# Mock price data loader for sandboxed environment
def load_price_data(symbol, start, end):
    dates = pd.date_range(start=start, end=end, freq='B')
    np.random.seed(42)
    prices = np.cumsum(np.random.randn(len(dates)) * 20 + 50000)
    df = pd.DataFrame(index=dates)
    df['Close'] = prices
    return df


def moving_average_crossover(data, short_window=20, long_window=50):
    data = data.copy()
    data['SMA_Short'] = data['Close'].rolling(window=short_window).mean()
    data['SMA_Long'] = data['Close'].rolling(window=long_window).mean()
    data['Signal'] = 0
    data.loc[data.index[short_window:], 'Signal'] = np.where(
        data['SMA_Short'][short_window:] > data['SMA_Long'][short_window:], 1, 0
    )
    data['Position'] = data['Signal'].diff()
    return data


def run_backtest(data):
    data = data.copy()
    data['Market_Returns'] = data['Close'].pct_change()
    data['Strategy_Returns'] = data['Market_Returns'] * data['Signal'].shift(1)
    data['Cumulative_Market'] = (1 + data['Market_Returns']).cumprod()
    data['Cumulative_Strategy'] = (1 + data['Strategy_Returns']).cumprod()
    return data


def calculate_performance_metrics(results):
    total_return = results['Cumulative_Strategy'].iloc[-1] - 1
    volatility = results['Strategy_Returns'].std() * np.sqrt(252)
    sharpe_ratio = results['Strategy_Returns'].mean() / results['Strategy_Returns'].std() * np.sqrt(252)
    return {
        "Total Return": total_return * 100,
        "Volatility": volatility * 100,
        "Sharpe Ratio": sharpe_ratio
    }


def plot_results(data):
    plt.figure(figsize=(14, 6))
    plt.plot(data['Cumulative_Market'], label='Market Returns', linestyle='--')
    plt.plot(data['Cumulative_Strategy'], label='Strategy Returns', linestyle='-')
    plt.title("Cumulative Returns")
    plt.xlabel("Date")
    plt.ylabel("Cumulative Returns")
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()


if __name__ == "__main__":
    # Load data
    start_date = datetime(2022, 1, 1)
    end_date = datetime(2023, 1, 1)
    data = load_price_data("BTC-USD", start=start_date, end=end_date)

    # Generate signals
    data = moving_average_crossover(data, short_window=20, long_window=50)

    # Run backtest
    results = run_backtest(data)

    # Evaluate performance
    metrics = calculate_performance_metrics(results)

    print("Performance Metrics:")
    for k, v in metrics.items():
        print(f"{k}: {v:.2f}")

    # Plot cumulative returns
    plot_results(results)
